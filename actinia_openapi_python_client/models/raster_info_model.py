# coding: utf-8

"""
    Actinia

     ================================ Actinia - The GRASS GIS REST API ================================  **Actinia** is an open source REST API for scalable, distributed, high performance processing of geographical data that uses GRASS GIS for computational tasks.  It provides a REST API to process satellite images, time series of satellite images, arbitrary raster data with geographical relations and vector data.  The REST interface allows to access, manage and manipulate the GRASS GIS database via HTTP GET,PUT,POST and DELETE requests and to process raster, vector and time series data located in a persistent GRASS GIS database. **Actinia** allows the processing of cloud based data, for example all Landsat 4-8 scenes as well as all Sentinel2A scenes in an ephemeral databases. The computational results of ephemeral processing are available via object storage as GeoTIFF files.  The full API documentation is available here: https://redocly.github.io/redoc/?url=https://actinia.mundialis.de/latest/ swagger.json   Examples: ---------  To execute the examples, first setup login information, IP address and port:      export ACTINIA_URL=https://actinia.mundialis.de/latest     export AUTH='-u demouser:gu3st!pa55w0rd'  **Data management**  - List all locations that are available in the actinia persistent database:      curl ${AUTH} -X GET \"${ACTINIA_URL}/locations\"  - List all mapsets in the location latlong_wgs84:      curl ${AUTH} -X GET \"${ACTINIA_URL}/locations/latlong_wgs84/mapsets\"  - List all raster layers in location latlong_wgs84 and mapset Sentinel2A      curl ${AUTH} -X GET     \"${ACTINIA_URL}/locations/latlong_wgs84/mapsets/Sentinel2A/raster_layers\"  - List all space-time raster datasets (STRDS) in location ECAD and mapset   PERMANENT:      curl ${AUTH} -X GET     \"${ACTINIA_URL}/locations/ECAD/mapsets/PERMANENT/raster_layers\"  - List all raster map layers of the STRDS precipitation_1950_2013_yearly_mm:      curl ${AUTH} -X GET     \"${ACTINIA_URL}/locations/ECAD/mapsets/PERMANENT/strds/precipitation_    1950_2013_yearly_mm/raster_layers\"  **Landsat and Sentinel2A NDVI computation**  This API call will compute the NDVI of the top of atmosphere (TOAR) corrected Landsat4 scene LC80440342016259LGN00:      curl ${AUTH} -X POST \"${ACTINIA_URL}/landsat_process/    LC80440342016259LGN00/TOAR/NDVI\"  NDVI computation of Sentinel2A scene S2A_MSIL1C_20170212T104141_N0204_R008_T31TGJ_20170212T104138:      curl ${AUTH} -X POST \"${ACTINIA_URL}/sentinel2_process/ndvi/    S2A_MSIL1C_20170212T104141_N0204_R008_T31TGJ_20170212T104138\"  The results of the asynchronous computations are available as GeoTIFF file in a cloud storage for download. 

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class RasterInfoModel(BaseModel):
    """
    Schema that contains raster map layer information
    """ # noqa: E501
    cells: Optional[StrictStr] = None
    cols: Optional[StrictStr] = None
    comments: Optional[StrictStr] = None
    creator: Optional[StrictStr] = None
    database: Optional[StrictStr] = None
    datatype: Optional[StrictStr] = None
    maptype: Optional[StrictStr] = None
    east: Optional[StrictStr] = None
    var_date: Optional[StrictStr] = Field(default=None, alias="date")
    description: Optional[StrictStr] = None
    ewres: Optional[StrictStr] = None
    max: Optional[StrictStr] = None
    min: Optional[StrictStr] = None
    ncats: Optional[StrictStr] = None
    nsres: Optional[StrictStr] = None
    location: Optional[StrictStr] = None
    map: Optional[StrictStr] = None
    mapset: Optional[StrictStr] = None
    rows: Optional[StrictStr] = None
    source1: Optional[StrictStr] = None
    north: Optional[StrictStr] = None
    source2: Optional[StrictStr] = None
    units: Optional[StrictStr] = None
    vdatum: Optional[StrictStr] = None
    south: Optional[StrictStr] = None
    timestamp: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    west: Optional[StrictStr] = None
    semantic_label: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["cells", "cols", "comments", "creator", "database", "datatype", "maptype", "east", "date", "description", "ewres", "max", "min", "ncats", "nsres", "location", "map", "mapset", "rows", "source1", "north", "source2", "units", "vdatum", "south", "timestamp", "title", "west", "semantic_label"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of RasterInfoModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of RasterInfoModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cells": obj.get("cells"),
            "cols": obj.get("cols"),
            "comments": obj.get("comments"),
            "creator": obj.get("creator"),
            "database": obj.get("database"),
            "datatype": obj.get("datatype"),
            "maptype": obj.get("maptype"),
            "east": obj.get("east"),
            "date": obj.get("date"),
            "description": obj.get("description"),
            "ewres": obj.get("ewres"),
            "max": obj.get("max"),
            "min": obj.get("min"),
            "ncats": obj.get("ncats"),
            "nsres": obj.get("nsres"),
            "location": obj.get("location"),
            "map": obj.get("map"),
            "mapset": obj.get("mapset"),
            "rows": obj.get("rows"),
            "source1": obj.get("source1"),
            "north": obj.get("north"),
            "source2": obj.get("source2"),
            "units": obj.get("units"),
            "vdatum": obj.get("vdatum"),
            "south": obj.get("south"),
            "timestamp": obj.get("timestamp"),
            "title": obj.get("title"),
            "west": obj.get("west"),
            "semantic_label": obj.get("semantic_label")
        })
        return _obj


